#!/usr/bin/env python
"""Program to convert simplified Wolfram Mathematica CForm expressions into Python functions"""
__license__ = "MIT"

import argparse
parser=argparse.ArgumentParser(description="Convert mathematica CForm expressions into Python methods")
parser.add_argument('inFile',help="Textfile containing mathematica output")
parser.add_argument('outFile', help="File in which to write new python methods")
args=parser.parse_args()


def getSymbols(equation):
    """Return a set of symbols present in the equation"""
    stopchars=['(',')','*','/','+','-',',']
    symbols=set()
    pos=0
    symbol=""
    for i, c in enumerate(equation,1):
        if c in stopchars:
            pos=i
            if(len(symbol)!=0):
                if not all(i.isdigit() for i in symbol):
                    if not '.' in symbol:
                        symbols.add(symbol)
                symbol=""
            
        else:
            symbol+=c
    if(len(symbol)!=0):
                if not all(i.isdigit() for i in symbol):
                    if not '.' in symbol:
                        symbols.add(symbol)
    symbols.discard('complex')
    return symbols


inFileLines=[]
equations=[]

with open(args.inFile) as file:
    inFileLines=file.readlines()

big_mathematica_output = "".join(inFileLines)
big_mathematica_output=big_mathematica_output.replace("\n","").replace(" ","").replace('Power', 'np.power').replace('Sqrt', 'np.lib.scimath.sqrt').replace('\t','').replace('\\',"").replace('Complex', 'complex')

if(big_mathematica_output[0:5]=='List('):
    equation_begin_pos=0
    big_mathematica_output=big_mathematica_output[5:-1]

bracketlevelcounter=0
for i, c in enumerate(big_mathematica_output):
    if c=='(':
        bracketlevelcounter+=1
    if c==')':
        bracketlevelcounter-=1
    if c==',' and bracketlevelcounter==0:
        equations.append(big_mathematica_output[equation_begin_pos:i])
        equation_begin_pos=i+1
equations.append(big_mathematica_output[equation_begin_pos:])


with open(args.outFile, 'w') as outFile:
    outFile.write("# Auto generated by MathematicaEquationToPython\n")
    outFile.write("# https://github.com/stevenshave/MathematicaEquationToPython\n\n")
    outFile.write("__license__ = \"MIT\"\n")
    outFile.write("import numpy as np\n\n\n")
    #Order symbols so that concentrations are first, then KDs
    function_symbols=getSymbols(equations[0])
    sorted_function_symbols=sorted([x for x in function_symbols if not x[0:2]=="kd" and not x[0]=="y"])+[x for x in function_symbols if x[0:2]=="kd"]+sorted([x for x in function_symbols if x[0]=="y"])[::-1]
    for index, eq in enumerate(equations):
        outFile.write("def solution"+str(index)+"("+",".join(sorted_function_symbols)+"):\n")
        outFile.write("\treturn "+eq+"\n\n\n")
    outFile.write("def all_solutions("+",".join(sorted_function_symbols)+"):\n")
    outFile.write("\treturn np.array([\n\t")
    for index, eq in enumerate(equations):
        outFile.write(eq+",\n\t")
    outFile.write("])")
print("Wrote "+str(len(equations))+" equations to file plus 1 wrapper to return np array of solutions")
